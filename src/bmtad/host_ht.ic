#define	HOST_HASH_TABLE_SIZE	256
#define	HOST_HASH_ENTRY_LIFE	(30 * 60)
#define	HOST_HASH_ENTRY_DELTA	8


typedef union
{
  unsigned long addr;
  unsigned char ipv4[4];
}     HostAddr;


typedef struct HostHashEntry
{
  unsigned long hostaddr;
  struct HostHashEntry *next;
  time_t uptime;
  int ref;
  int hflag;
  char hostname[0];
}             HostHashEntry;


static HostHashEntry *HostHashTable[HOST_HASH_TABLE_SIZE];


static int
hht_look(addr, host)
  HostAddr *addr;
  char *host;
{
  int hv;
  HostHashEntry *he;

  /* hash value of 140.114.87.5 : 114 ^ 87 ^ 5 */

  hv = (addr->ipv4[1] ^ addr->ipv4[2] ^ addr->ipv4[3]) &
    (HOST_HASH_TABLE_SIZE - 1);

  he = HostHashTable[hv];

  for (;;)
  {
    if (!he)
    {
      int hflag, len;

      hflag = dns_name((unsigned char *)addr, host);
      len = strlen(host) + 1;
      he = (HostHashEntry *) malloc(sizeof(HostHashEntry) + len);
      he->hostaddr = addr->addr;
      he->next = HostHashTable[hv];
      he->ref = 0;
      he->hflag = hflag;
      memcpy(he->hostname, host, len);
      HostHashTable[hv] = he;
      break;
    }

    if (he->hostaddr == addr->addr)
    {
      strcpy(host, he->hostname);
      break;
    }

    he = he->next;
  }

  he->ref++;
  time(&he->uptime);

  return he->hflag;
}


static int
hht_expire(now)
  time_t now;
{
  int i;
  HostHashEntry **hp, *he;

  now -= HOST_HASH_ENTRY_LIFE;

  for (i = 0; i < HOST_HASH_TABLE_SIZE; i++)
  {
    hp = &HostHashTable[i];

    while ((he = *hp))
    {
      if (he->uptime < now)
      {
	if (he->ref <= HOST_HASH_ENTRY_DELTA)
	{
	  *hp = he->next;
	  free(he);
	  continue;
	}

	he->ref -= HOST_HASH_ENTRY_DELTA;
      }

      hp = &(he->next);
    }
  }
  return 0;
}
