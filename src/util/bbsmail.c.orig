/*-------------------------------------------------------*/
/* util/bbsmail.c	( NTHU CS MapleBBS Ver 3.00 )    */
/*-------------------------------------------------------*/
/* target : 由 Internet 寄信給 BBS 站內使用者            */
/* create : 95/03/29                                     */
/* update : 97/03/29                                     */
/*-------------------------------------------------------*/


#include <sysexits.h>


#include "bbs.h"

#define ANTI_HTMLMAIL           /* itoc.021014: 擋 html_mail */
#define ANTI_NOTMYCHARSETMAIL   /* itoc.030513: 擋 not-mycharset mail */

//#define	LOG_FILE	("run/mailog")
#define		LOG_FILE	FN_BBSMAILPOST_LOG

static void
mailog(msg)
  char *msg;
{
  FILE *fp;

  if (fp = fopen(LOG_FILE, "a"))
  {
    time_t now;
    struct tm *p;

    time(&now);
    p = localtime(&now);
    fprintf(fp, "%02d/%02d %02d:%02d:%02d <bbsmail> %s\n",
      p->tm_mon + 1, p->tm_mday,
      p->tm_hour, p->tm_min, p->tm_sec,
      msg);
    fclose(fp);
  }
}


/* static */
void
str_lower(dst, src)
  char *dst, *src;
{
  register int ch;

  do
  {
    ch = *src++;
    *dst++ = (ch >= 'A' && ch <= 'Z') ? ch | 32 : ch;
  } while (ch);
}


static void
strip_ansi(dst, src)
  char *dst, *src;
{
  register int ch, ansi;

  ansi = 0;
  for (;;)
  {
    ch = *src++;
    if (ch == '\0' || ch == '\r' || ch == '\n')
      break;

    if (ch == 27)
    {
      ansi = 1;
    }
    else if (ansi)
    {
      if (!strchr("[01234567;", ch))
	ansi = 0;
    }
    else
    {
      *dst++ = ch;
    }
  }
  *dst = '\0';
}


/* ----------------------------------------------------- */
/* chrono ==> file name (32-based)			 */
/* 0123456789ABCDEFGHIJKLMNOPQRSTUV			 */
/* ----------------------------------------------------- */


#if 0 /* Thor.980907: 已放入 dao lib中 */
static char radix32[32] = {
  '0', '1', '2', '3', '4', '5', '6', '7',
  '8', '9', 'A', 'B', 'C', 'D', 'E', 'F',
  'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
  'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
};


static void
archiv32(chrono, fname)
  register time_t chrono;	/* 32 bits */
  register char *fname;		/* 7 chars */
{
  register char *str;

  str = fname + 7;
  *str = '\0';
  for (;;)
  {
    *(--str) = radix32[chrono & 31];
    if (str == fname)
      return;
    chrono >>= 5;
  }
}


static void
str_stamp(str, chrono)
  char *str;
  time_t *chrono;
{
  register struct tm *ptime;

  ptime = localtime(chrono);
  /* Thor.990329: y2k */
  sprintf(str, "%02d/%02d/%02d",
    ptime->tm_year % 100, ptime->tm_mon + 1, ptime->tm_mday);
}

#endif

static int
mail2bbs(userid)
  char *userid;
{
  HDR mhdr;
  char buf[512], title[256], sender[256], *str, *ptr;
  int fd, fx;
  time_t chrono;
  FILE *fp;
  struct stat st;

  char fpath[80]; /* Thor.0827: 暫存檔案名稱 */

  /* check if the userid is in our bbs now */

  sprintf(buf, "usr/%c/%s/.DIR", *userid, userid);
  fx = open(buf, O_WRONLY | O_CREAT | O_APPEND, 0600);
  if ((fx < 0) || fstat(fx, &st))
  {
    sprintf(buf, "BBS user <%s> not existed", userid);
    mailog(buf);
    puts(buf);
    return EX_NOUSER;
  }

  if (st.st_size > MAX_BBSMAIL * sizeof(HDR))
  {
    close(fx);
    sprintf(buf, "BBS user <%s> over-spammed", userid);
    mailog(buf);
    puts(buf);
    return EX_NOUSER;
  }

#ifdef	DEBUG
  printf("dir: %s\n", buf);
#endif

  /* allocate a file for the new mail */

  ptr = strchr(buf, '.');
  *ptr++ = '@';
  *ptr++ = '/';
  *ptr++ = '@';
  chrono = time(NULL);

  for (;;)
  {
    archiv32(chrono, ptr);
    fd = open(buf, O_WRONLY | O_CREAT | O_EXCL, 0600);
    if (fd >= 0)
      break;

    if (errno != EEXIST)
    {
      close(fx);
      sprintf(buf, "ERR create user <%s> file", userid);
      mailog(buf);
      return EX_NOUSER;
    }

    chrono++;
  }

  /* copy the stdin to the specified file */

  if ((fp = fdopen(fd, "w")) == NULL)
  {
    printf("Cannot open file <%s>\n", buf);
    close(fx);
    close(fd);
    return -1;
  }

  strcpy(fpath, buf); /* Thor.0827: 暫存檔案名稱 */

#ifdef	DEBUG
  printf("file: %s\n", buf);
#endif

  memset(&mhdr, 0, sizeof(HDR));
  mhdr.chrono = chrono;
  mhdr.xmode = MAIL_INCOME;
  strcpy(mhdr.xname, ptr - 1);
  str_stamp(mhdr.date, &mhdr.chrono);

  /* parse header */

  title[0] = sender[0] = '\0';

  while (fgets(buf, sizeof(buf), stdin) && buf[0])
  {
    if (!memcmp(buf, "From", 4))
    {
      if ((str = strchr(buf, '<')) && (ptr = strrchr(str, '>')))
      {
	if (str[-1] == ' ')
	  str[-1] = '\0';

	if (strchr(++str, '@'))
	  *ptr = '\0';
	else					/* 由 local host 寄信 */
	  strcpy(ptr, "@" MYHOSTNAME);

	ptr = (char *) strchr(buf, ' ');
	while (*++ptr == ' ');
	if (*ptr == '"')
        {
	  char *right;

	  if (right = strrchr(++ptr, '"'))
	    *right = '\0';

	  str_decode(ptr);
	  sprintf(sender, "%s (%s)", str, ptr);
	  strcpy(mhdr.nick, ptr);
	  strcpy(mhdr.owner, str);
        }
        else
        { /* Thor.980907: 沒有 finger name, 特別處理 */
	  strcpy(sender, str);
	  strcpy(mhdr.owner, str);
        }
      }
      else
      {
	strtok(buf, " \t\n\r");
	strcpy(sender, (char *) strtok(NULL, " \t\n\r"));

	if (strchr(sender, '@') == NULL)	/* 由 local host 寄信 */
	  strcat(sender, "@" MYHOSTNAME);
	strcpy(mhdr.owner, sender);
      }
      continue;
    }

    if (!memcmp(buf, "Subject: ", 9))
    {
      strip_ansi(title, buf + 9);
      str_decode(title);
      continue;
    }

    if (!memcmp(buf, "Content-Type: ", 14))
    {
      str = buf + 14;

#ifdef ANTI_HTMLMAIL
      /* 一般 BBS 使用者通常只寄文字郵件或是從其他 BBS 站寄文章到自己的信箱
         而廣告信件通常是 html 格式或是裡面有夾帶其他檔案
         利用郵件的檔頭有 Content-Type: 的屬性把除了 text/plain (文字郵件) 的信件都擋下來 */
      if (*str != '\0' && str_ncmp(str, "text/plain", 10))
      {
        sprintf(buf, "ANTI-HTML [%d] %s => %s", getppid(), sender, userid);
        mailog(buf);
        return EX_NOUSER;
      }
#endif

#ifdef ANTI_NOTMYCHARSETMAIL
      {
        char charset[32];
        mm_getcharset(str, charset, sizeof(charset));
        if (str_cmp(charset, "big5") && str_cmp(charset, "us-ascii"))
        {
          sprintf(buf, "ANTI-NONMYCHARSET [%d] %s => %s", getppid(), sender, userid);
          mailog(buf);
          return EX_NOUSER;
        }
      }
#endif
    }

    if (buf[0] == '\n')
      break;
  }

  if (!title[0])
    sprintf(title, "來自 %.64s", sender);

  fprintf(fp, "作者: %s\n標題: %s\n時間: %s\n",
    sender, title, ctime(&mhdr.chrono));

  while (fgets(buf, sizeof(buf), stdin) && buf[0])
    fputs(buf, fp);

  fclose(fp);

  /* sprintf(buf, "%s => %s", sender, userid); */
  /* Thor.0827: 加上 parent process id 及檔名, 以便抓垃圾信 */
  sprintf(buf, "[%d] %s => %s\t%s",getppid(), sender, userid, fpath); 

  mailog(buf);

  /* append the record to the MAIL control file */

  title[TTLEN] = '\0';
  strcpy(mhdr.title, title);
  write(fx, &mhdr, sizeof(HDR));
  close(fx);
  return 0;
}


static void
sig_catch(sig)
  int sig;
{
  char buf[512];

  while (fgets(buf, sizeof(buf), stdin) && buf[0]);
  sprintf(buf, "signal [%d]", sig);
  mailog(buf);
  exit(0);
}

int
main(argc, argv)
  int argc;
  char *argv[];
{
  char buf[512];

  /* argv[1] is userid in bbs   */

  if (argc < 2)
  {
    printf("Usage:\t%s <bbs_uid>\n", argv[0]);
    exit(-1);
  }

  setgid(BBSGID);
  setuid(BBSUID);
  chdir(BBSHOME);

  signal(SIGBUS, sig_catch);
  signal(SIGSEGV, sig_catch);
  signal(SIGPIPE, sig_catch);

  str_lower(buf, argv[1]);

  if (mail2bbs(buf))
  {
    /* eat mail queue */
    while (fgets(buf, sizeof(buf), stdin) && buf[0]);
    /* exit(-1); */
  }
  exit(0);
}
